// Utility Types упрощают создание сложных типов на основе существующих
// Примеры некоторых полезных Utility Types на TypeScript:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Partial - делает все свойства объекта опциональными:

interface User {
    id: number;
    name: string;
    age: number;
}

type PartialUser = Partial<User>;

// эквивалентно:

interface PartialUser {
    id?: number;
    name?: string;
    age?: number;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Required - делает все свойства обязательными:

type RequiredUser = Required<User>;

// эквивалентно

interface RequiredUser {
    id: number;
    name: string;
    age: number;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Record - позволяет создать объект с заданными ключами и значениями:

type PageViews = Record<string, number>;

let views: PageViews = {
    home: 10,
    about: 5,
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Custom - собственный тип для массива только с числами:

type NumberArray = Array<number>;

let nums: NumberArray = [1, 2, 3];
